<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js, | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js-/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2017-01-13T10:28:29+01:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring Promise Patterns]]></title>
    <link href="http://balinterdi.com/2016/10/05/refactoring-promise-patterns.html"/>
    <updated>2016-10-05T09:22:00+02:00</updated>
    <id>http://balinterdi.com/2016/10/05/refactoring-promise-patterns</id>
    <content type="html"><![CDATA[<p>I'm sure you have written a lot of code that looks something like this:</p>

<p>```js
// app/controllers/band.js
actions: {
  save() {</p>

<pre><code>let band = this.get('model');
this.set('isLoading', true);
return band.save()
  .then((result) =&gt; {
    this.set('successMessage', 'Band has been saved.');
  })
  .catch(() =&gt; {
    this.set('error', 'Band is too unruly to be saved.');
  })
  .finally(() =&gt; {
    this.set('isLoading', false);
  });
</code></pre>

<p>  }
}
```</p>

<p>Setting back <code>isLoading</code> to false is conveniently placed in a <code>finally</code> handler
so that it happens both if the promise resolves successfully (the band is
saved) and if it is rejected (there is an error during the save).</p>

<p>The <code>isLoading</code> is then used in the corresponding template to show a spinner
and/or disable the save button while the save is in flight:</p>

<p><div>
  <pre><code class='html'>// app/templates/band.hbs
&lt;button type=&quot;button&quot; onclick=(action &quot;save&quot;) disabled={{isLoading}}&gt;Save band&lt;/button&gt;</code></pre>
</div>
</p>

<p>I know I have written this hundreds of times by now and it has increasingly
disturbed me that setting and unsetting the loading flag is boilerplate code,
something that could be refactored.</p>

<p>One nice thing about promises is that they are easy to compose. Here is how
we could define a function that adds the boilerplatey parts:</p>

<p>```
// app/controllers/band.js</p>

<p>function saveWithLoadingFlag(operation, loadingProperty) {
  this.set(loadingProperty, true);
  return operation.finally(() => {</p>

<pre><code>this.set(loadingProperty, false);
</code></pre>

<p>  });
}</p>

<p>actions: {
  save() {</p>

<pre><code>let band = this.get('model');
return saveWithLoadingFlag.call(this, band.save(), 'isLoading')
  .then((result) =&gt; {
    this.set('successMessage', 'Band has been saved.');
  })
  .catch(() =&gt; {
    this.set('error', 'Band is too unruly to be saved.');
  });
</code></pre>

<p>  }
}
```</p>

<p>You might go a tiny step further and use a default value for the loading flag:</p>

<p>```js
// app/controllers/band.js</p>

<p>function saveWithLoadingFlag(operation, loadingProperty='isLoading') {
  this.set(loadingProperty, true);
  return operation.finally(() => {</p>

<pre><code>this.set(loadingProperty, false);
</code></pre>

<p>  });
}</p>

<p>actions: {
  save() {</p>

<pre><code>let band = this.get('model');
return saveWithLoadingFlag.call(this, band.save())
  .then((result) =&gt; {
    this.set('successMessage', 'Band has been saved.');
  })
  .catch(() =&gt; {
    this.set('error', 'Band is too unruly to be saved.');
  });
</code></pre>

<p>  }
}
```</p>

<p>Since <code>saveWithLoadingFlag</code> returns a promise, we can add our own handlers to it,
including other <code>finally</code> handlers.</p>

<p>You can find a working example <a href="https://ember-twiddle.com/54db7a0a708afe3cf59bfa634f1c3a06?numColumns=2&amp;openFiles=controllers.application.js%2Ctemplates.application.hbs">here</a>,
where you can play around with it.</p>
]]></content>
  </entry>
  
</feed>
