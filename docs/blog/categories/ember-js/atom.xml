<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2017-01-13T10:28:29+01:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Two-way symmetric relationships in Ember with JSON API - Part 2]]></title>
    <link href="http://balinterdi.com/2016/11/29/two-way-symmetric-relationships-in-ember-with-jsonapi-part-2.html"/>
    <updated>2016-11-29T13:55:00+01:00</updated>
    <id>http://balinterdi.com/2016/11/29/two-way-symmetric-relationships-in-ember-with-jsonapi-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="/2016/11/17/two-way-symmetric-relationships-in-ember-with-jsonapi-part-1.html">Part 1</a> of this series, we saw what symmetric relationships are, how to
model them on the back-end (using Rails) and how to implement a simple app that
displays such relationships in Ember.js, adhering to the JSON API specification
for serializing data.</p>

<p>The solution we came up with worked but was a very naive one. For N relationships
a resource had, it made 2N+1 queries to the back-end to display them. We should
do better and in this post we'll see how.</p>

<p>(If you haven't read <a href="/2016/11/17/two-way-symmetric-relationships-in-ember-with-jsonapi-part-1.html">the previous post</a>, this one will not make much sense,
so I recommend to at least skim it before you delve into this one.)</p>

<h2>One request to rule them all</h2>

<p>We'd observed that for each person whose friendships we wanted to observe, our
application made 2N+1 requests. One to grab the friendships themselves, and then
two requests for each friendship in that collection, one to fetch the
friender, one to fetch the friended person.</p>

<p><img src="/images/posts/symmetric-relationships/too-many-xhrs.png" alt="Too many XHRs" /></p>

<p>We also noticed that those people (instances of the Person model) had already
been fetched at that point so the extra requests were for nothing. Our mission
is thus to reduce the 2N+1 requests to a single one, the one that fetches the
friendships.</p>

<h2>How would Ember (Data) know?</h2>

<p>If we take a look at the data returned by the request for friendships, you can
see that both the <code>friended</code> and <code>friender</code> end of each are just links with no
type or identity information (like <code>/friendships/1/friended</code>). This is all
that's needed for an asynchronous relationship, since the client (Ember Data, in
this case) can just fetch the relationship data when/if it needs it.</p>

<p><img src="/images/posts/symmetric-relationships/relationship-without-resource-linkage-data.png" alt="No linkage data" /></p>

<p>The solution, then, might be to include some data about the resource that the
relationship refers to. In the JSON API vocabulary this is called <a href="http://jsonapi.org/format/#document-resource-object-linkage">resource
linkage</a>:</p>

<blockquote>
Resource linkage in a compound document allows a client to link together all
of the included resource objects without having to GET any URLs via links.
</blockquote>


<p>Digging around in the <a href="https://github.com/cerebris/jsonapi-resources">jsonapi-resources source</a>, we find a relationship
option called <code>always_include_linkage_data</code> that seems to do what we need. Let's
add that to the relationships of the friendship resource and see:</p>

<p>```ruby</p>

<h1>app/resources/friendship_resource.rb</h1>

<p>class FriendshipResource &lt; JSONAPI::Resource
  has_one :friender, always_include_linkage_data: true
  has_one :friended, always_include_linkage_data: true
  attributes :strength
end
```</p>

<p>If we now reload our Ember app, we see how a <code>data</code> key was added to each
relationship in the response, uniquely identifying the person resource that is
the friender (or friended) in the friendship relationship:</p>

<p><img src="/images/posts/symmetric-relationships/relationship-with-resource-linkage-data.png" alt="Relationship with linkage data" /></p>

<p>Furthermore, the extra XHRs we wanted to eliminate are now indeed gone as Ember
Data is smart enough to just use the referred resources that are already in the
store:</p>

<p><img src="/images/posts/symmetric-relationships/no-useless-xhrs.png" alt="Just the XHRs we need" /></p>

<h2>Let's just be friends (not friendeds or frienders)</h2>

<p>We have now achieved what we'd wanted and only have to make one request per
person to fetch and display their friendships.</p>

<p>It looks a bit weird, though, that when a person's friendships are displayed, we
also display the person's name, too:</p>

<p><img src="/images/posts/symmetric-relationships/friendships-step-1.png" alt="Mike McCready's friendships - Part 1" /></p>

<p>Let's fix that by transforming the <code>friendships</code> of the person to an array where
each item only contains the friend's name (and the strength of the friendship):</p>

<p>```js
// app/controllers/people/show.js
import Ember from 'ember';</p>

<p>const { Controller, computed } = Ember;</p>

<p>export default Controller.extend({
  friendships: computed('model.friendships.[]', function() {</p>

<pre><code>let person = this.get('model');
let friendships = this.get('model.friendships');
return friendships.map((friendship) =&gt; {
  let friend;
  if (friendship.get('friended.id') === person.get('id')) {
    friend = friendship.get('friender');
  } else {
    friend = friendship.get('friended');
  }
  return {
    friend,
    strength: friendship.get('strength')
  };
});
</code></pre>

<p>  })
});
```</p>

<p>Nothing fancy going on, we check which end of the relationship the person in
question (the <code>model</code>) is, and then only return the other end.</p>

<p>We should now use <code>friendships</code> in the template instead of <code>model.friendships</code>:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;
    &lt;h3 class=&quot;panel-title&quot;&gt;Friends of {{model.name}}&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    {{#if friendships.length}}
      &lt;ul class=&quot;friend-list&quot;&gt;
        {{#each friendships as |friendship|}}
          &lt;li class=&quot;friend-list-item&quot;&gt;
            &lt;span class=&quot;name&quot;&gt;{{friendship.friend.name}}&lt;/span&gt;
            &lt;span class=&quot;badge&quot;&gt;{{friendship.strength}}&lt;/span&gt;
          &lt;/li&gt;
        {{/each}}
      &lt;/ul&gt;
    {{else}}
      &lt;div class=&quot;empty-list&quot;&gt;
        &lt;p class=&quot;empty-message&quot;&gt;{{model.name}} has no friends :(&lt;/p&gt;
      &lt;/div&gt;
    {{/if}}
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>It works, we indeed only see the friend's name, not the person's:</p>

<p><img src="/images/posts/symmetric-relationships/only-friend-name.png" alt="Relationship with linkage data" /></p>

<h2>Resources</h2>

<p>Hopefully you can now implement a symmetric relationship with relative
ease, the next time you encounter it.</p>

<p>I made the source code of both <a href="https://github.com/balinterdi/ember-two-way-symmetric-relationships">the Ember app</a> and the <a href="https://github.com/balinterdi/two-way-symmetric-relationships-api">Rails API</a>
available on Github. If you want to learn more about the jsonapi-resources gem,
I suggest you visit <a href="http://jsonapi-resources.com/">the documentation site</a>.</p>

<p>Finally, if you'd like to receive the series as a pdf, fill out the form below
and I'll send it to you right away!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two-way symmetric relationships in Ember with JSON API - Part 1]]></title>
    <link href="http://balinterdi.com/2016/11/17/two-way-symmetric-relationships-in-ember-with-jsonapi-part-1.html"/>
    <updated>2016-11-17T12:52:00+01:00</updated>
    <id>http://balinterdi.com/2016/11/17/two-way-symmetric-relationships-in-ember-with-jsonapi-part-1</id>
    <content type="html"><![CDATA[<h2>Definition</h2>

<p>In data modelling, a symmetric relationship is a special kind of relationship
where the description of the relationship from the perspective of one end of
the relationship is identical to looking at it from the perspective of the other
end.</p>

<p>Friendship between people is a good example. If Megan is Selma's friend, it
follows that Selma is Megan's friend, too. On the other hand, the "knows"
relationship between two people is not a symmetric one. I might know Danny
Carey (the drummer of Tool), but that does not imply he knows me.</p>

<h2>Historical background</h2>

<p>My research into how to model and implement such a relationship in an Ember
application was sparked by <a href="http://stackoverflow.com/questions/34186435/modelling-two-way-symmetric-relationships-in-ember">this Stack Overflow question</a> that was posed by
a reader of <a href="http://rockandrollwithemberjs.com">my book</a>. It was more difficult than I thought it would be so I
was intrigued to find the (an) answer.</p>

<p>My solution turned out to have a fairly large API component, too, so the
following post will show both the server-side implementation (in Rails) and the
client-side one (in Ember).</p>

<p>If you don't speak Rails, fear not. The code is straightforward and easy to
understand without any substantial Rails knowledge, thanks in most part to the gem that
makes it extremely easy to serialize data models and relationships to json:api
format, <a href="https://github.com/cerebris/jsonapi-resources">jsonapi-resources</a>.</p>

<h2>Data modelling</h2>

<p>We'll start with the data modelling part, which is the Rails side.</p>

<p>To be able to model our problem in the data layer, let's say that Friendships
have a <code>friender</code> and a <code>friended</code> end of the relationship and a strength
attribute that measures how strong their friendship is.</p>

<p>We should create a (data) migration that will create a database table when run:</p>

<pre><code>    $ rails g migration create_friendships
</code></pre>

<p>Let's fill in the generated migration with the above attributes:</p>

<p>```ruby
class CreateFriendships &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :friendships do |t|
  t.integer :friender_id
  t.integer :friended_id
  t.integer :strength
  t.timestamps null: false
end
</code></pre>

<p>  end
end
```</p>

<p>A Friendship, then, is between two people (Persons), so let's define that in the
corresponding model file:</p>

<p>```ruby</p>

<h1>app/models/friendship.rb</h1>

<p>class Friendship &lt; ActiveRecord::Base
  belongs_to :friender, class_name: Person
  belongs_to :friended, class_name: Person
end
```</p>

<p>We'll want to list all the friendships a person has so a <code>friendships</code> method
needs to be added to the Person class:</p>

<p>```ruby</p>

<h1>app/models/person.rb</h1>

<p>class Person &lt; ActiveRecord::Base
  def friendships</p>

<pre><code>Friendship.where("friender_id = ? OR friended_id = ?", id, id);
</code></pre>

<p>  end
end
```</p>

<p>We select the friendships where either the <code>friender</code> or the <code>friended</code> is the
person we query it for. This is where the symmetric aspect of the relationship
is implemented. We don't care if the person friended somebody or if that
somebody friended him, they are friends.</p>

<p>Note that modelling it this way, we could split up the symmetric relationship
into the two constituent parts. We could return only the friendships where the
person in question "initiated" it (was the friender), or "let himself be
friended" (was the friender).</p>

<h2>Server endpoints, resources, serializing relationships</h2>

<p>We could now turn our attention to setting up the endpoints and serializing the
model, and relationship data for the client application to consume. First, let's
install <a href="https://github.com/cerebris/jsonapi-resources">the jsonapi-resources gem</a>:</p>

<pre><code>    $ gem install jsonapi-resources
</code></pre>

<p>This gives us a jsonapi:resource generator that we can use to create both the
endpoints and the serializer for our resources.</p>

<pre><code>    $ rails generate jsonapi:resource person
    $ rails generate jsonapi:resource friendship
</code></pre>

<p>The created resources are placed in the <code>app/resources</code> folder. Let's add the
attributes we want to serialize for each one:</p>

<p>```ruby</p>

<h1>app/resources/person_resource.rb</h1>

<p>class PersonResource &lt; JSONAPI::Resource
  attributes :name
  has_many :friendships, class_name: "Friendship"
end
```</p>

<p>```ruby</p>

<h1>app/resources/friendship_resource.rb</h1>

<p>class FriendshipResource &lt; JSONAPI::Resource
  has_one :friender
  has_one :friended
  attributes :strength
end
```</p>

<p>Creating the endpoints is no more work than adding a <code>jsonapi_resources</code> call
for each resource in the router configuration:</p>

<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>Rails.application.routes.draw do
  jsonapi_resources :people
  jsonapi_resources :friendships
end
```</p>

<p>The gem also provides a controller generator so let's use it to create controllers for our resources:</p>

<pre><code>    $ rails generate jsonapi:controller person
    $ rails generate jsonapi:controller friendship
</code></pre>

<p>They can be left empty but they need to be created in a way that they are
descendants of JSONAPI::ResourceController (the generator takes care of that):</p>

<p>```ruby</p>

<h1>app/controllers/people_controller.rb</h1>

<p>class PeopleController &lt; JSONAPI::ResourceController
end
```</p>

<p>```ruby</p>

<h1>app/controllers/friendships_controller.rb</h1>

<p>class FriendshipsController &lt; JSONAPI::ResourceController
end
```</p>

<p>The back-end is now done, we can switch our focus to the Ember app.</p>

<h2>The front-end</h2>

<p>We want a list of people (<a href="http://rockandrollwithemberjs.com">rock stars</a>, of course) and then have a list of
their friendships on the person details page.</p>

<p><img src="/images/posts/symmetric-relationships/friendships-step-1.png" alt="Mike McCready's frienships - Part 1" /></p>

<p>The first step is to set up the routes:</p>

<p>```javascript
(...)
Router.map(function() {
  this.route('people', { path: '/' }, function() {</p>

<pre><code>this.route('show', { path: '/people/:person_id' });
</code></pre>

<p>  });
});</p>

<p>export default Router;
```</p>

<p>The model hooks for these routes are the classic, "fetch'em all" and "fetch the
one that matches the id" methods of Ember Data's store:</p>

<p>```javascript
// app/routes/people.js
import Ember from 'ember';</p>

<p>export default Ember.Route.extend({
  model() {</p>

<pre><code>return this.store.findAll('person');
</code></pre>

<p>  }
});
```</p>

<p>```javascript
// app/routes/people/show.js
import Ember from 'ember';</p>

<p>export default Ember.Route.extend({
  model(params) {</p>

<pre><code>return this.store.findRecord('person', params.person_id);
</code></pre>

<p>  }
});
```</p>

<p>Before we move on to writing the templates, let's define the models:</p>

<p>```js
// app/models/person.js
import DS from 'ember-data';</p>

<p>const { Model, attr, hasMany } = DS;</p>

<p>export default Model.extend({
  name: attr(),
  friendships: hasMany(),
  frienderFriendships: hasMany('friendship', { inverse: 'friender' }),
  friendedFriendships: hasMany('friendship', { inverse: 'friended' }),
});
```</p>

<p>```js
// app/models/friendship.js
import DS from 'ember-data';</p>

<p>const { Model, attr, belongsTo } = DS;</p>

<p>export default Model.extend({
  strength: attr('number'),
  friender: belongsTo('person', { inverse: 'frienderFriendships' }),
  friended: belongsTo('person', { inverse: 'friendedFriendships' }),
});
```</p>

<p>This is rather standard Ember Data stuff, possibly with the exception of the
<code>inverse</code> definitions. Since we have two relationships between <code>Person</code> and
<code>Friendship</code> we need to specify the other end of each relationship and that's
what we do with the <code>inverse</code> option.</p>

<p>With the models and routes in place, we can now see what the templates should look like.</p>

<p>The top-level <code>people</code> route is again fairly straightforward:</p>

<p><div>
  <pre><code class='html'>// app/templates/people.hbs&lt;/p&gt;

&lt;div class=&quot;col-md-4&quot;&gt;
  &lt;div class=&quot;list-group&quot;&gt;
    {{#each model as |person|}}
      {{link-to person.name &#39;people.show&#39; person.id class=&quot;list-group-item&quot;}}
    {{/each}}
  &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;col-md-8&quot;&gt;
  {{outlet}}
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>The <code>each</code> loop iterates through each person and renders a link for each of
those that will take us to the person details page, which will display the
person's friendships.</p>

<p><img src="/images/posts/symmetric-relationships/people-list-step-1.png" alt="List of people" /></p>

<h3>Listing a person's friendships</h3>

<p><div>
  <pre><code class='html'>// app/templates/people/show.hbs&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;div class=&quot;panel-heading&quot;&gt;
    &lt;h3 class=&quot;panel-title&quot;&gt;Friends of {{model.name}}&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    &lt;ul class=&quot;friend-list&quot;&gt;
      {{#each model.friendships as |friendship|}}
        &lt;li class=&quot;friend-list-item&quot;&gt;
          &lt;span class=&quot;name&quot;&gt;{{friendship.friender.name}}&lt;/span&gt;
          &lt;span class=&quot;name&quot;&gt;{{friendship.friended.name}}&lt;/span&gt;
          &lt;span class=&quot;badge&quot;&gt;{{friendship.strength}}&lt;/span&gt;
        &lt;/li&gt;
      {{/each}}
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>There is nothing fancy going on here, either. The <code>model</code> is the person
retrieved in the route.  For each friendship that he has, the friender's and
the friended's name are rendered along with the strength of the relationship.
(Either <code>friender</code> or <code>friended</code> will be the person itself, but we can ignore that
in the first version.)</p>

<p>This naive approach works, the friendships for the selected person are listed correctly:</p>

<p><img src="/images/posts/symmetric-relationships/friendships-step-1.png" alt="Mike McCready's friendships - Part 1" /></p>

<h2>A 2N+1 problem</h2>

<p>However, looking at the requests to the backend for just one page, one gets the
impression that we're not done yet:</p>

<p><img src="/images/posts/symmetric-relationships/too-many-xhrs.png" alt="Too many XHRs" /></p>

<p>For each friendship the person has, two requests are sent to the backend. One to
fetch the <code>friender</code> and another one to fetch the <code>friended</code> person. This is not
an <a href="https://www.sitepoint.com/silver-bullet-n1-problem/">N+1 query problem</a>, this is worse, a 2N+1 query problem!</p>

<p>On top of that, those requests are sent for no good reason as we'd previously
loaded the people referred by those <code>friended</code> and <code>friended</code> relationships.</p>

<p>In the next part, we'll see how these wasteful requests can be eliminated and
we'll also make the person details page less perplexing by not displaying the
person whose page we're looking at in the relationships. Stay tuned!</p>

<p>UPDATE: <a href="/2016/11/29/two-way-symmetric-relationships-in-ember-with-jsonapi-part-2.html">Part 2</a> is now available!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.9 is released]]></title>
    <link href="http://balinterdi.com/2016/11/16/rock-and-roll-with-ember-dot-js-2-dot-9-is-released.html"/>
    <updated>2016-11-16T14:17:00+01:00</updated>
    <id>http://balinterdi.com/2016/11/16/rock-and-roll-with-ember-dot-js-2-dot-9-is-released</id>
    <content type="html"><![CDATA[<p>I just published an updated version of the <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js book</a>. The app now runs on 2.9.1 and there are only
<a href="https://github.com/balinterdi/rarwe-issues/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.9">a few really minor changes</a> this time.</p>

<p>If you're looking to get started in Ember, I encourage you read a sample chapter below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable FastBoot in your Ember app]]></title>
    <link href="http://balinterdi.com/2016/11/11/enable-fastboot-in-your-ember-app.html"/>
    <updated>2016-11-11T11:20:00+01:00</updated>
    <id>http://balinterdi.com/2016/11/11/enable-fastboot-in-your-ember-app</id>
    <content type="html"><![CDATA[<h2>What is FastBoot and why should you use it?</h2>

<p><a href="https://ember-fastboot.com/">FastBoot</a> is the awesome add-on that adds
server-side rendering to your Ember app. This will make users of your
application see the content of your page before any of the javascript is
downloaded. In other words, the <a href="https://blog.alexmaccaw.com/time-to-first-tweet">"time to first tweet"</a>
of your app is greatly reduced, which is a big win where and when people have slow
or unstable network connections.</p>

<p>Another advantage is that search engine crawlers will have an easier job
indexing your site, which brings SEO benefits.</p>

<p>Furthermore, your site will be readable with Javascript disabled which is
convenient for screen readers.</p>

<p>I recently went through the process of enabling the demo version of the
<a href="http://rockandrollwithemberjs.com">Rock and Roll application</a> to run in Fastboot.
Below, I'm going to tell you about the challenges I encountered and how I
overcame them in the hope that my journey will prove valuable when you do the same for
your app.</p>

<h2>Installing the add-on</h2>

<p>FastBoot is a regular Ember add-on, so installing it is piece of cake:</p>

<pre><code>$ ember install ember-cli-fastboot
</code></pre>

<p>I could then run</p>

<pre><code>$ ember fastboot
</code></pre>

<p>from the project's directory and had the node server serving my application at
port 3000. It's important to note that you should refresh your browser tab each
time you make changes to your code as FastBoot doesn't (yet) auto-refresh the
way <code>ember server</code> does.</p>

<p>I then disabled JavaScript in my browser and then directed my browser to <code>http://localhost:3000</code>.</p>

<p>Disabling JavaScript in Chrome is most easily done by expanding the context menu
of Developer Tools and then clicking on Settings:</p>

<p><img src="/images/posts/fastboot/disable-javascript-in-chrome.png" alt="Disable JavaScript" /></p>

<h2>Mirage is disabled in FastBoot mode</h2>

<p>My first obstacle turned out to be Mirage.</p>

<p>Mirage is a great tool for mocking server responses and even <a href="https://www.codeschool.com/blog/2016/07/07/building-an-ember-app-without-a-back-end/">prototyping your Ember app</a>.
I used it in development, too, and it turned out that since <a href="https://github.com/samselikoff/ember-cli-mirage/blob/24f994f4419f1b175c82331b00c3089e3f65c038/index.js#L106">it turns itself off</a>
when your app is running in FastBoot mode, the requests hitherto handled by
Mirage now went out and were thus unhandled.</p>

<p>The fix here was to disable Mirage in development (and, in my case, production,
too) and to make the requests against an actual API.</p>

<p>You also have to add the hosts that will serve your Ember app in FastBoot mode
to a list called hostWhitelist in your app's configuration.</p>

<p>In my case, it contains the host I wanted to deploy it to and any localhost
port:</p>

<p>```js
// config/environment.js
module.exports = function(environment) {
  var ENV = {</p>

<pre><code>(...)
fastboot: {
  hostWhitelist: ['demo.rockandrollwithemberjs.com', /^localhost:\d+$/]
}
</code></pre>

<p>  };
```</p>

<h2>Serving assets</h2>

<p>When I restarted the <code>ember fastboot</code> and looked at the server-rendered version
of my app, I saw that the dynamic data was now correctly rendered on the page.
However, it did not have any styling.</p>

<p>A quick glance at <a href="https://ember-fastboot.com/docs/user-guide">the documentation</a> made me realize I needed to pass the
<code>serve-assets</code> option to the command so that it serves the css (and other asset)
files:</p>

<pre><code>$ ember fastboot --serve-assets
</code></pre>

<h2>document is not defined</h2>

<p>So now the main page, with the list of bands rendered fine but when I selected
one of the bands to have their songs displayed, I got the following error:</p>

<pre><code>Error while processing route: bands.band.songs document is not defined
</code></pre>

<p>Since Fastboot runs your Ember app in a node environment, not in the browser,
<code>document</code> is not present. In my case, I accessed <code>document</code> (through jQuery)
to set the document title, which does not work in FastBoot mode.</p>

<p>The user guide suggested to use <a href="https://github.com/kimroen/ember-cli-document-title">ember-cli-document-title</a>, a FastBoot
compatible way to set document titles. So my next step was to install that
add-on:</p>

<pre><code>$ ember install ember-cli-document-title
</code></pre>

<p>Armed with this great add-on, I only had to define a title (method) in the
corresponding route:</p>

<p>```js
// app/routes/bands/band/songs.js
import Ember from 'ember';</p>

<p>export default Ember.Route.extend({
  (...)
  title() {</p>

<pre><code>let bandName = this.modelFor('bands.band').get('name');
return `${bandName} songs - Rock and Roll`;
</code></pre>

<p>  },
});
```</p>

<h2>Missing dynamic content</h2>

<p>The next thing that did not work was that the songs for a specific band did not
load in FastBoot mode, the list of songs was empty each time.</p>

<p>Adolfo Builes and Jonathan Jackson helped me out by pointing out that songs are
loaded asynchronously. The request to fetch the songs was only fired when the
template rendered each song belonging to the band. FastBoot does not
know when the page is fully rendered and thus relies on the <code>beforeModel</code>,
<code>model</code> and <code>afterModel</code> route hooks having finished their work. When that
happened, the songs were not yet fetched and rendered on the screen yet:</p>

<p><img src="/images/posts/fastboot/songs-missing.png" alt="Songs missing" /></p>

<p>The way to fix this was to block rendering in the <code>afterModel</code> hook, by
returning a promise that fetched the songs:</p>

<p>```js
// app/routes/bands/band/songs.js
import Ember from 'ember';</p>

<p>export default Ember.Route.extend({
  fastboot: Ember.inject.service(),</p>

<p>  afterModel() {</p>

<pre><code>if (this.get('fastboot.isFastBoot')) {
  let band = this.modelFor('bands.band');
  return band.get('songs');
}
</code></pre>

<p>  },
  (...)
});
```</p>

<p>As you can see, I only pre-fetch the songs in FastBoot mode. In the browser, I
let rendering start earlier, with a "pop-in" effect (which can be remedied in
several ways in the browser, too).</p>

<p>The songs now appeared in the FastBoot "view" of the app, too:</p>

<p><img src="/images/posts/fastboot/songs-present.png" alt="Songs present" /></p>

<p>You can read more about this in the "Use Model Hooks to Defer Rendering" section
of <a href="https://ember-fastboot.com/docs/user-guide">the guide</a>.</p>

<h2>Fastboot-enabled hosting</h2>

<p>It's fine to have FastBoot working in development but nobody actually needs
it to work in that environment. It has to work when deployed to a server.</p>

<p>The guide has <a href="https://ember-fastboot.com/docs/deploying">a whole page on deployment</a>, listing several deployment
options, from which I chose Heroku as it seemed the easiest option. And it really was.</p>

<p>All I had to do was to set the buildpack URL from my project:</p>

<pre><code>$ heroku buildpacks:set https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/emberjs.tgz -a rarwe-demo
</code></pre>

<p>I then added a <code>static.json</code> file to the root of my project, to disable forcing
https requests, as the domain is not (yet) SSL-supported:</p>

<p>```js
// static.json
{
  "root": "dist/",
  "https_only": false,
  "clean_urls": true,
  "routes": {</p>

<pre><code>"/**": "index.html"
</code></pre>

<p>  },
  "headers": {</p>

<pre><code>"/**": {
  "Cache-Control": "private, no-store, no-cache, must-revalidate, proxy-revalidate",
  "Pragma": "no-cache",
  "Expires": "Sat, 05 Nov 1955 00:00:00 PST",
  "Strict-Transport-Security": "max-age=31536000; includeSubDomains;",
  "X-Download-Options": "noopen",
  "X-Content-Type-Options": "nosniff",
  "X-Frame-Options": "SAMEORIGIN",
  "X-XSS-Protection": "1; mode=block"
},
"/assets/**": { "Cache-Control": "public, max-age=512000" },
"/robots.txt": { "Cache-Control": "public, max-age=512000" },
"/crossdomain.xml": { "Cache-Control": "public, max-age=512000" }
</code></pre>

<p>  }
}
```</p>

<p>This step is really only needed to change the default <code>https_only</code> setting. If
you have SSL set up for your domain, you don't need the <code>static.json</code> file.</p>

<p>The next time I pushed to the remote set up by Heroku, it just worked, and my
app was now FastBoot enabled. Hooray!</p>

<h2>Acknowledgements and further resources</h2>

<p>I would like to thank <a href="https://twitter.com/abuiles">Adolfo</a> and <a href="https://twitter.com/rondale_sc">Jonathan</a> for their help in pointing
me at <a href="https://emberweekend.com/">Ember Weekend</a>, an Ember app that runs in FastBoot and <a href="https://github.com/ember-weekend/ember-weekend">whose source code is publicly available</a>,
and also for overcoming the above mentioned "missing dynamic content" problem.</p>

<p>My app does not use many of Fastboot's features. If you're looking to see a more
complex use case, check out the <a href="https://github.com/ember-weekend/ember-weekend">Ember Weekend source code</a>.</p>

<p>If you want to learn more about FastBoot's architecture and rationale, I
recommend checking out <a href="https://vimeo.com/157688134">Tom Dale's great presentation</a> he gave at Global
Ember Meetup.</p>

<p>Finally, the Rock and Roll demo app that this post describes is available on
Github at <a href="https://github.com/balinterdi/rarwe-demo">balinterdi/rarwe-demo</a> and deployed to <a href="http://demo.rockandrollwithemberjs.com">http://demo.rockandrollwithemberjs.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Visual Integration for Ember apps]]></title>
    <link href="http://balinterdi.com/2016/10/17/continuous-visual-integration-for-ember-apps.html"/>
    <updated>2016-10-17T19:15:00+02:00</updated>
    <id>http://balinterdi.com/2016/10/17/continuous-visual-integration-for-ember-apps</id>
    <content type="html"><![CDATA[<p>I recently watched Mike Fotinakis's presentation at the San Francisco Ember
meetup, <a href="https://youtu.be/iECnXK9EqA4">Continuous Visual Integration with Ember</a>,
and I've become really enthusiastic about visual diffs, and Percy.</p>

<p>It's really worth the time and I highly recommend to watch it. I could say
"watch it now and then come back" but it's a 50-minute long video while this
post takes 5 minutes to read, so I recommend to do it the other way around: read
this post first and then go and watch the presentation where he goes into more
details on what visual diffs and CI are, how Percy works and answers to
questions from the audience.</p>

<p>Ready? Cool. Start the timer and let's go.</p>

<h3>So what is continuous visual integration?</h3>

<p>I will give you the high-level definition and rationale of visual diffs
and continuous visual integration as the post otherwise wouldn't make sense.</p>

<p>When we change code, the intangible stuff apps are made of, we risk breaking it.
To prevent this, we write tests that guard against regression (a nice way of
saying breaking stuff) and do code reviews where someone goes over the code
diffs, and potentially after a series of edits, confirms it.</p>

<p>However, that's just the code part. There are other ways to break a web
application, a major one among them is for the app to look differently than
before, in an unintended way. The background color of a button might change, a
link could have become hidden, or a css file could no longer be downloaded
which all lead to a degraded visual experience for visitors of the app.</p>

<p>Our (textual) tests could pass with flying colors and yet the users of the app
could be running away screaming from our site. Visual diffs guard against that
scenario by showing a visual diff, what certain scenarios looked before and
after the code changes under test.</p>

<h3>Visual diffs as part of the review process</h3>

<p>The idea is to have screenshots made at certain points in our user flows and
have a review process that approves the changes, just as we do for code.</p>

<p>To automate the process, we integrate the generation of visual diffing in the
automated testing process. This will produce the "before" and "after"
screenshots that will be used to generate the diffs. Let's see how this is done
in practice.</p>

<h3>Making all this a breeze with Percy</h3>

<p>Percy is a visual diffing tool that automates all of this and integrates
smoothly into the Github pull request process. To get started with Percy,
install the Ember addon:</p>

<pre><code>$ ember install ember-percy
</code></pre>

<p>If you use Mirage for your tests, like I do, make sure to define a passthrough
rule for Percy on top of your Mirage config, before any other rules (see
<a href="https://percy.io/docs/clients/javascript/ember">the docs</a>):</p>

<p><code>js
// mirage/config.js
export default function() {
  this.passthrough('/_percy/**');
  (...)
})
</code></p>

<p><strong>NOTE</strong> Starting from ember-percy version 1.2.4, you no longer need to do the
above as ember-percy doesn't use Mirage anymore.</p>

<p>To demo how the development flow changes to accommodate visual diffing, I prepared <a href="https://github.com/balinterdi/rarwe-demo/pull/10">a PR to make a dropdown</a>
in the <a href="https://github.com/balinterdi/rarwe-demo">Rock and Roll with Ember demo</a> nicer.</p>

<p>Before implementing the change, I wrote a test that verifies if the songs for a
particular band are listed correctly:</p>

<p>```js
// tests/acceptance/songs-test.js
import Ember from 'ember';
import { test } from 'qunit';</p>

<p>(...)</p>

<p>test('List songs for a band', function(assert) {
  visit('/bands');
  click('a:contains("Tool")');
  percySnapshot('list-songs-for-band');</p>

<p>  andThen(function() {</p>

<pre><code>assert.equal(Ember.$('.song').length, 3, "All songs for the selected band are displayed");
assert.equal(Ember.$('.song:contains("46 &amp; 2")').length, 1, "The first song is displayed");
</code></pre>

<p>  });
});
```</p>

<p>The thing to note here is <code>percySnapshot</code>. If Percy is set up in the environment
where the test runs, it generates a screenshot identified by the name we pass it
(or auto-generates one). To set up Percy, the <code>PERCY_TOKEN</code> and <code>PERCY_PROJECT</code>
env vars need to be set in the CI tool of your choice. <a href="https://percy.io/docs">The Percy
docs</a> explain how.</p>

<p>Once we have a percySnapshot, the next time we push and our CI builds the
project, Percy will have a new snapshot for us:</p>

<p><img src="/images/posts/visual-ci-with-percy/percy-first-screenshot.png" alt="First screenshot - No diff yet" /></p>

<p>We can now implement our feature on a branch and create a pull request for it on
Github. As you can see on the following screenshot, approving the visual diffs
is now part of the flow:</p>

<p><img src="/images/posts/visual-ci-with-percy/github-pr-before-percy-approval.png" alt="Github before Percy approval" /></p>

<p>Clicking "Details" takes us to the visual diffs where we must explicilty approve
the changes:</p>

<p><img src="/images/posts/visual-ci-with-percy/percy-visual-diff.png" alt="Percy visual diffs" /></p>

<p>Once the visual diffs are approved, the PR is all green and we can lean back in
our chairs and merge it, safe in the knowledge we did not visually break the
app.</p>

<p><img src="/images/posts/visual-ci-with-percy/github-pr-after-percy-approval.png" alt="Github after Percy approval" /></p>

<p>Just as with "normal" tests, the more snapshots we have, the higher the chance
we did not introduce any regressions with our latest changes. Mike recommends a
"breadth first" approach, making screenshots from tests that verify different
scenarios instead of a "depth first" approach, creating several screenshots for
the same scenario.</p>

<h3>Closing words</h3>

<p>I'm all sold on visual diffing and I think there is tremendous value in securing
our apps this way.</p>

<p>I encourage you to <a href="https://youtu.be/iECnXK9EqA4">watch Mike's presentation</a>
and <a href="https://percy.io/">sign up for Percy</a> to become a better steward of your applications.</p>
]]></content>
  </entry>
  
</feed>
